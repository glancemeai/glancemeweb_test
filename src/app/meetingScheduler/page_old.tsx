'use client';

import React, { useState, useEffect } from "react";
import { format } from "date-fns";
import { CalendarIcon, Users, Video, Clock } from "lucide-react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import styles from "./MeetingScheduler.module.css";
import Header from "../home/header/header";
import { BsStars } from "react-icons/bs";
import Apis from "../service/hooks/ApiSlugs";

// Type for scheduled meetings
interface MeetingDetails {
  topic: string;
  description: string;
  when: Date;
  endTime: Date;
  platform: string;
  participants: string;
  link: string;
  recordAudio: boolean;
  recordVideo: boolean;
  recordCaptions: boolean;
  summary?: string;
  transcript?: string;
}

const mockSummary = "AI-generated summary of your last meeting will appear here.";
const mockTranscript = "Transcript text goes here. This is where detailed conversation appears, powered by future AI.";

const MeetingScheduler: React.FC = () => {
  const [topic, setTopic] = useState<string>("");
  const [date, setDate] = useState<Date | undefined>(undefined);
  const [time, setTime] = useState<string>("");
  const [participants, setParticipants] = useState<string>("");
  const [scheduled, setScheduled] = useState<MeetingDetails | null>(null);
  const [pastMeetings, setPastMeetings] = useState<MeetingDetails[]>();
  const [isVisible, setIsVisible] = useState<boolean>(false);
  const [description, setDescription] = useState<string>("");
  const [endTime, setEndTime] = useState<string>("");
  const [platform, setPlatform] = useState<string>("google_meet");
  const [recordAudio, setRecordAudio] = useState<boolean>(true);
  const [recordVideo, setRecordVideo] = useState<boolean>(true);
  const [recordCaptions, setRecordCaptions] = useState<boolean>(true);


  useEffect(() => {
    // Trigger animation on component mount
    const timer = setTimeout(() => {
      setIsVisible(true);
    }, 200);

    return () => clearTimeout(timer);
  }, []);

  const getCombinedDateTime = (): Date | undefined => {
    if (!date || !time) return undefined;
    const [hours, minutes] = time.split(":").map(Number);
    const dateWithTime = new Date(date);
    dateWithTime.setHours(hours || 0, minutes || 0, 0, 0);
    return dateWithTime;
  };

  const handleSchedule = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {
    e.preventDefault();
    const startDateTime = getCombinedDateTime();
    const endDateTime = getEndDateTime();
    
    if (!topic || !startDateTime || !endDateTime) return;
    
    // Parse participants string into array of objects
    const participantsList = participants.split(',').map(participant => {
      const email = participant.trim();
      return {
        name: email.split('@')[0], // Basic name extraction from email
        email: email
      };
    });
    const meetingData = {
      title: topic,
      description: description || `Meeting: ${topic}`,
      platform: platform,
      meetingUrl: "", // Will be generated by the backend
      startTime: startDateTime.toISOString(),
      endTime: endDateTime.toISOString(),
      recordAudio,
      recordVideo,
      recordCaptions,
      storage: {
        audioPath: "",
        videoPath: "",
        captionPath: ""
      },
      participants: participantsList
    };

    try {
      const apis = Apis();
      const response = await apis.CreateMeeting(meetingData);
      
      if (response.status === 200) {
        const newMeeting: MeetingDetails = {
          topic,
          description,
          when: startDateTime,
          endTime: endDateTime,
          platform,
          participants,
          link: response.data.meetingUrl || "Meeting URL will be generated",
          recordAudio,
          recordVideo,
          recordCaptions,
          summary: mockSummary,
          transcript: mockTranscript,
        };
        setScheduled(newMeeting);
        setPastMeetings([newMeeting]);
        resetForm();
      } else {
        alert(response.message || 'Failed to create meeting');
      }
    } catch (error) {
      console.error('Error creating meeting:', error);
      alert('Failed to create meeting. Please try again.');
    }
  };
  const resetForm = () => {
    setTopic("");
    setDescription("");
    setDate(undefined);
    setTime("");
    setEndTime("");
    setParticipants("");
    setPlatform("google_meet");
    setRecordAudio(true);
    setRecordVideo(true);
    setRecordCaptions(true);
  };
  const getEndDateTime = (): Date | undefined => {
    if (!date || !endTime) return undefined;
    const [hours, minutes] = endTime.split(":").map(Number);
    const dateWithTime = new Date(date);
    dateWithTime.setHours(hours || 0, minutes || 0, 0, 0);
    return dateWithTime;
  };


  return (
    <>
      <Header />
      <div className={styles.container}>
        {/* Background with gradient and images */}
        <div className={styles.containerBg} />
        
        <div className={styles.contentHolder}>
          <div className={styles.teamHeaderSection}>
            {/* Hero Section */}
            <div className={styles.heroSection}>
              <h1 className={`${styles.titleAnimation} ${isVisible ? styles.visible : ''}`}>
                Personal Meeting
              </h1>
              <h2 className={`${styles.subtitleAnimation} ${isVisible ? styles.visible : ''}`}>
                <span className={styles.starsIcon}><BsStars size={40} color="blue" /></span>
                Room
              </h2>
              <p className={`${styles.heroSubtitle} ${isVisible ? styles.visible : ''}`}>
                Effortlessly schedule and join video meetings
              </p>
            </div>

            {/* Schedule Card */}
            <div className={`${styles.scheduleCard} ${isVisible ? styles.visible : ''}`}>
              <h3 className={styles.cardTitle}>
                <Video size={24} className={styles.cardIcon} />
                Schedule New Meeting
              </h3>

              <form onSubmit={handleSchedule} className={styles.form}>
                <div className={styles.inputGroup}>
                  <label className={styles.inputLabel}>Meeting Topic</label>
                  <input
                    className={styles.inputField}
                    placeholder="1-on-1 Sync, Demo, etc."
                    value={topic}
                    onChange={(e) => setTopic(e.target.value)}
                    required
                  />
                </div>
                <div className={styles.inputGroup}>
                  <label className={styles.inputLabel}>Description</label>
                  <textarea
                    className={styles.inputField}
                    placeholder="Meeting description..."
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                  />
              </div>

                <div className={styles.inputGroup}>
                  <label className={styles.inputLabel}>Date</label>
                  <div className={styles.datePickerWrapper}>
                    <CalendarIcon size={18} className={styles.inputIcon} />
                    <DatePicker
                      selected={date}
                      onChange={(date: Date | null) => setDate(date ?? undefined)}
                      minDate={new Date()}
                      placeholderText="Pick a date"
                      className={styles.inputField}
                      dateFormat="PPP"
                    />
                  </div>
                </div>

                <div className={styles.inputGroup}>
                  <label className={styles.inputLabel}>Time</label>
                  <input
                    type="time"
                    className={styles.inputField}
                    value={time}
                    onChange={(e) => setTime(e.target.value)}
                    required
                  />
                </div>
                <div className={styles.inputGroup}>
                <label className={styles.inputLabel}>End Time</label>
                <input
                  type="time"
                  className={styles.inputField}
                  value={endTime}
                  onChange={(e) => setEndTime(e.target.value)}
                  required
                />
              </div>

              <div className={styles.inputGroup}>
                <label className={styles.inputLabel}>Platform</label>
                <select
                  className={styles.inputField}
                  value={platform}
                  onChange={(e) => setPlatform(e.target.value)}
                >
                  <option value="google_meet">Google Meet</option>
                  <option value="zoom">Zoom</option>
                  <option value="teams">Microsoft Teams</option>
                </select>
              </div>

              <div className={styles.checkboxGroup}>
        <label className={styles.checkboxLabel}>
          <input
            type="checkbox"
            checked={recordAudio}
            onChange={(e) => setRecordAudio(e.target.checked)}
          />
          Record Audio
        </label>
        <label className={styles.checkboxLabel}>
          <input
            type="checkbox"
            checked={recordVideo}
            onChange={(e) => setRecordVideo(e.target.checked)}
          />
          Record Video
        </label>
        <label className={styles.checkboxLabel}>
          <input
            type="checkbox"
            checked={recordCaptions}
            onChange={(e) => setRecordCaptions(e.target.checked)}
          />
          Record Captions
        </label>
      </div>

                <div className={styles.inputGroup}>
                  <label className={styles.inputLabel}>
                    Participants <span className={styles.optionalNote}>(optional, comma separated)</span>
                  </label>
                  <input
                    className={styles.inputField}
                    placeholder="alex@email.com, taylor@email.com"
                    value={participants}
                    onChange={(e) => setParticipants(e.target.value)}
                  />
                </div>

                <button
                  type="submit"
                  className={styles.scheduleButton}
                  disabled={!topic || !date || !time}
                >
                  Schedule & Join Room
                </button>
              </form>
            </div>

            {/* Live Meeting Card */}
            {scheduled && (
              <div className={styles.liveCard}>
                <h3 className={styles.cardSubtitle}>Meeting Room is Ready! 🎥</h3>
                <div className={styles.cardInfo}>
                  <Clock size={18} /> 
                  {format(scheduled.when, "PPpp")}
                </div>
                <div className={styles.cardInfo}>
                  <Users size={18} /> 
                  {scheduled.participants || "No participants added"}
                </div>
                <div className={styles.linkSection}>
                  <span className={styles.linkLabel}>Meeting link:</span>
                  <a
                    href={scheduled.link}
                    target="_blank"
                    rel="noopener noreferrer"
                    className={styles.linkValue}
                  >
                    {scheduled.link}
                  </a>
                </div>
                <button 
                  className={styles.secondaryButton} 
                  onClick={() => setScheduled(null)}
                >
                  Schedule Another
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default MeetingScheduler;